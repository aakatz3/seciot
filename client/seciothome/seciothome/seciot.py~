import datetime
import time
import json
import urllib2
from iotsec_settings import *
import sqlite3



class SecIOT():
	def __init__(self, server_host, guid, auth, home_or_mobile,statefile="state.db"):
		self.server_host = server_host
		self.home_or_mobile = home_or_mobile
		self.auth = auth
		self.state_file = statefile
		self.dbconn = sqlite3.connect(self.state_file)

		service_path = self.get_server_path(home_or_mobile)
		if service_path == None:
			raise "fail"
		else:
			self.service_path = service_path

		self.guid = guid

	def get_server_path(self, home_or_mobile):
		if home_or_mobile == IOT_MOBILE_DEVICE:
			service_path = "/mobile/"
		elif home_or_mobile == IOT_HOME_NODE:
			service_path = "/home/"
		else:
			service_path = None
		return service_path

	def poll_state(self, poll_type):
		req = urllib2.Request('http://%s/%s/%s' % (self.server_host, self.get_server_path(poll_type), self.guid))
		req.add_header('Content-Type', 'application/json')

		tmsg = {'guid':self.guid, 'home_or_mobile': poll_type, 'state':self.getvalues()}

		response =  urllib2.urlopen(req, json.dumps(tmsg))

		f = response.read()

		for v in json.loads(f)["state"]:	
			t = self.getvalue(v[0])
			beforetime = time.mktime(datetime.datetime.strptime(t[2], "%Y-%m-%d %H:%M:%S").timetuple())
			currenttime = time.mktime(datetime.datetime.strptime(v[2], "%Y-%m-%d %H:%M:%S").timetuple())
			if beforetime < currenttime:
				self.setvalue(v[0],v[1])
#			self.setvalue()

		return ""

	def push_state(self):
		req = urllib2.Request('http://%s/%s/%s' % (self.server_host, self.service_path, self.guid))
		req.add_header('Content-Type', 'application/json')

		tmsg = {'guid':self.guid, 'home_or_mobile': self.home_or_mobile, 'state':self.getvalues()}

		response =  urllib2.urlopen(req, json.dumps(tmsg))
		r =  response.read()
		return r

	def getvalues(self):
		c = self.dbconn.cursor()
                c.execute("select * from valuetables")
                return c.fetchall()

	def setvalue(self, name, value):
		c = self.dbconn.cursor()
	        c.execute("insert or replace into valuetables (valname,valvalue,valtime) values (?,?,datetime('now','localtime'))",[name,value])
		self.dbconn.commit()

	def getvalue(self, name):
		c = self.dbconn.cursor()
	        c.execute("select * from valuetables where valname=?",[name])
		return c.fetchone()
		
	def clearvalues(self):
		c = self.dbconn.cursor()
	        c.execute("delete from valuetables")
		self.dbconn.commit()
		


                                                                                                                                           
if __name__ == "__main__":                                                                                                                   
#	foobar = SecIOT("aakatz3.aakportfolio.com:8031","sfasdasdfa","enc_key" , IOT_HOME_NODE);
	foobar = SecIOT("aakatz3.aakportfolio.com:8031","sfasdasdfa","enc_key" , IOT_MOBILE_DEVICE);
	
	status = False
	foobar.setvalue("switch1",status)
	foobar.setvalue("switch2",status)
	foobar.setvalue("switch3",status)
	foobar.setvalue("switch4",status)
	foobar.setvalue("switch5",status)

	print foobar.push_state()
	print foobar.poll_state(IOT_HOME_NODE)
	print foobar.poll_state(IOT_MOBILE_DEVICE)
	

